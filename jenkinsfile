pipeline {
    agent any 
        environment {
            AWS_ACCESS_KEY_ID = credentials ('AWS_ACCESS_KEY_ID')
            AWS_SECRET_ACCESS_KEY = credentials ('AWS_SECRET_ACCESS_KEY')
        }

        parameters {
            choice (choices : 'ALL\nINFRA\nAPP\nUPDATE' , description : 'this is to set conditions for pipeline' , name : 'deploy_options') 
        }

        stages {
            stage ('Terraform init') {
                 when {
                    expression {params.deploy_options == 'ALL' || params.deploy_options == 'INFRA'}
                }
                steps {
                    script {
                        echo "${params.deploy_options}"
                    }
                    sh '''
                    cd dev
                    terraform init
                    '''
                
                }
            }

            stage ('Terraform plan') { 
                when {
                    expression {params.deploy_options == 'ALL' || params.deploy_options == 'INFRA'}
                }
                steps {
                sh '''
                cd dev
                terraform plan
                '''
                 }
                
            }

            stage ('Terraform apply') {
                 when {
                    expression {params.deploy_options == 'ALL' || params.deploy_options == 'INFRA'}
                }
                steps {
                     sh '''
                     cd dev
                terraform apply -auto-approve
                '''
                }
            }

                stage ('Installing Ansible') {
                    when {
                        expression {params.deploy_options == 'ALL' || params.deploy_options == 'APP'}
                    }
                steps{
                    sshagent(credentials : ['SSH_PRIVATE_KEY']) {
                        sh '''
                        cd dev
                        ansible_node=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                        ssh -o StrictHostKeyChecking=no ec2-user@$ansible_node 'sudo yum install python -y && sudo yum install pip -y && pip install ansible'
                        '''
                    }
                }
            }

            stage ('Git cloning ansible-playbook file to Ansible node') {
                when {
                    expression {params.deploy_options == 'UPDATE' || params.deploy_options == 'ALL' }
                }
                steps {
                    sshagent(credentials : ['SSH_PRIVATE_KEY']) {
                        sh'''
                        cd dev
                        ansible_node=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                        ssh -o StrictHostKeyChecking=no ec2-user@$ansible_node '
                        sudo yum update -y && 
                        sudo yum install git -y && 
                        git clone https://github.com/uthmanakz/playbook-nginx.git'
                        '''
                    }
                }
            }

        

            stage ('Adding inventory in file') {
                when {
                    expression {params.deploy_options == 'ALL' || params.deploy_options == 'UPDATE'}
                }
                steps {
                    sshagent(credentials : ['SSH_PRIVATE_KEY']) {
                       sh '''
                       cd dev
                       ANSIBLE_NODE=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                       NGINX_NODE1=`terraform output | grep NGINX-1 | awk -F '"' '{print $2}'`
                       NGINX_NODE2=`terraform output | grep NGINX-2 | awk -F '"' '{print $2}'`
                       
                       ssh -o StrictHostKeyChecking=no ec2-user@$ANSIBLE_NODE "
                       cd playbook-nginx
                       echo '[web-servers]' > inventory.ini
                       echo "$NGINX_NODE1" >> inventory.ini
                       echo "$NGINX_NODE2" >> inventory.ini"
                       '''
                    }
                }
            }

            stage ('Deploying Playbook') {
                when {
                    expression {params.deploy_options == 'ALL' || params.deploy_options == 'UPDATE'}
                }
                steps {
                     withCredentials([sshUserPrivateKey(credentialsId : 'SSH_PRIVATE_KEY' , keyFileVariable: 'PLAYBOOK_KEY')]) {
                            sh '''
                            cd dev
                            ANSIBLE_NODE=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                            
                            ssh -o StrictHostKeyChecking=no -i $PLAYBOOK_KEY ec2-user@$ANSIBLE_NODE 'cd playbook-nginx && touch playbook_key.pem && chmod 600 playbook_key.pem'
                            scp -o StrictHostKeyChecking=no -i $PLAYBOOK_KEY $PLAYBOOK_KEY ec2-user@$ANSIBLE_NODE:playbook-nginx/playbook_key.pem
                            ssh -o StrictHostKeyChecking=no -i $PLAYBOOK_KEY ec2-user@$ANSIBLE_NODE 'cd playbook-nginx && ansible-playbook -i inventory.ini --private-key playbook_key.pem ansible.yml'
                            '''
                        
                    }
                   
                }
            }

            stage('Cloning ansible file for python') {
                steps {
                    sshagent(credentials : ['SSH_PRIVATE_KEY']) {
                        sh '''
                        cd dev
                        ANSIBLE_NODE=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                        
                        ssh -o StrictHostKeyChecking=no ec2-user@$ANSIBLE_NODE '
                        sudo yum update -y &&
                        sudo yum install git -y &&
                        git clone https://github.com/uthmanakz/playbook-python.git'
                        '''
                    }
                }
            }

            stage(' Adding server in inventory file in ansible playbook-python dir') {
                steps {
                    sshagent(credentials : ['SSH_PRIVATE_KEY']) {
                        sh'''
                        cd dev
                        ANSIBLE_NODE=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                        PYTHON_NODE1=`terraform output | grep PYTHON-1 | awk -F '"' '{print $2}'`
                        PYTHON_NODE2=`terraform output | grep PYTHON-2 | awk -F '"' '{print $2}'`
                        
                        ssh -o StrictHostKeyChecking=no ec2-user@$ANSIBLE_NODE "
                        cd playbook-python
                        echo "[app-servers]" > inventory.ini
                        echo "$PYTHON_NODE1" >> inventory.ini
                        echo "$PYTHON_NODE2" >> inventory.ini"
                        '''
                    }
                }
            }

            stage('Moving python file into ansible playbook-python dir') {
                steps {
                    sshagent(credentials : ['SSH_PRIVATE_KEY']) {
                        sh '''
                        cd dev
                        ANSIBLE_NODE=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                        scp -o StrictHostKeyChecking=no ../code/hello.py ec2-user@$ANSIBLE_NODE:playbook-python/
                        '''
                    }
                }
            }

            stage('Deploying playbook for python nodes') {
                steps{
                    withCredentials([sshUserPrivateKey(credentialsId : 'SSH_PRIVATE_KEY' , keyFileVariable : 'PYTHON_PLAYBOOK_KEY')]) {
                        sh'''
                        cd dev
                        ANSIBLE_NODE=`terraform output | grep ANSIBLE | awk -F '"' '{print $2}'`
                        ssh -o StrictHostKeyChecking=no -i $PYTHON_PLAYBOOK_KEY ec2-user@$ANSIBLE_NODE 'cd playbook-python && chmod 600 playbook_key'
                        scp -o StrictHostKeyChecking=no -i $PYTHON_PLAYBOOK_KEY $PYTHON_PLAYBOOK_KEY ec2-user@$ANSIBLE_NODE:playbook-python/playbook_key
                        ssh -o StrictHostKeyChecking=no -i $PYTHON_PLAYBOOK_KEY ec2-user@$ANSIBLE_NODE 'cd playbook-python && ansible-playbook -i inventory.ini --private-key playbook_key playbook.yml'
                        '''
                    }
                }
            }

            stage('pytest check on python machines') {
                steps {
                    sshagent(credentials : ['SSH_PRIVATE_KEY']) {
                        sh '''
                        cd dev
                        PYTHON_NODE1=`terrraform output | grep PYTHON-1 | awk -F '"' '{print $2}'`
                        PYTHON_NODE2=`terrraform output | grep PYTHON-2 | awk -F '"' '{print $2}'`
                       
                        ssh -o StrictHostKeyChecking=no ec2-user@$PYTHON_NODE1 'pytest /tmp/hello.py'
                        ssh -o StrictHostKeyChecking=no ec2-user@$PYTHON_NODE2 'pytest /tmp/hello.py'
                        '''
                    }
                }
            }
        

           

             
        }
    
}


